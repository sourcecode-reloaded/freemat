dnl Process this file with autoconf to produce a configure script.
AC_INIT(libs/libFreeMat/Array.cpp)

dnl sets build, host, target variables and the same with _alias
AC_CANONICAL_SYSTEM

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_F77
AC_PROG_YACC
AC_PROG_RANLIB

AC_ARG_WITH(mpi,
	[AC_HELP_STRING([--with-mpi],
	        [Build the MPI executables [default=no]])],
		usempi="yes",
		usempi="no")

dnl check for blas, lapack, mpi
ACX_BLAS([], AC_MSG_ERROR([cannot find BLAS on your system - you must install BLAS first]))

ACX_LAPACK([], AC_MSG_ERROR([cannot find LAPACK on your system - you must install LAPACK first]))

ACX_MPI( ,usempi="no" )

AC_CHECK_PROG(qmake_exists,[qmake],[found],AC_MSG_ERROR([cannot run qmake on your system - you must install QT first]))

AC_C_BIGENDIAN(AC_DEFINE([WORDS_BIGENDIAN],1,[System is big endian]),AC_DEFINE([WORDS_BIGENDIAN],0,[System is not big endian]),AC_MSG_ERROR([cannot determine if system is big endian or little endian... what kind of system is this??]))

AC_CONFIG_HEADERS(config.h:configh.in)

AC_OUTPUT

dnl 
dnl dnl **** Check for BLAS ****
dnl 
dnl if test "$G77" = "yes"; then
dnl   FFLAGS="$FFLAGS -ffloat-store"
dnl fi
dnl 
dnl if test "$forceminiblas" != "yes" ; then
dnl fi
dnl 
dnl if test "$forceminiblas" = "yes" ; then
dnl   BLAS_LIBS="-L\${top_builddir}/libs/libMiniBLAS -lMiniBLAS"
dnl   miniblasdir="libMiniBLAS"
dnl   AC_MSG_WARN([using included (reference implementation) BLAS - this may result in poor matrix algebra performance - consider installing ATLAS (http://math-atlas.sourceforge.net) and then rebuilding])
dnl fi
dnl 
dnl dnl AM_CONDITIONAL([NEED_BLAS], [test "$forceminiblas" = yes])
dnl 
dnl dnl **** Check for curses ****
dnl 
dnl MP_WITH_CURSES
dnl 
dnl if test ! "$CURSES_LIB"; then
dnl    AC_MSG_ERROR([could not find curses or ncurses libraries - one of these must be available for FreeMat to be built])
dnl fi
dnl 
dnl dnl **** Check for MPI ****
dnl 
dnl AC_LANG_CPLUSPLUS
dnl if test "$usempi" = "yes"; then
dnl fi
dnl 
dnl if test "$usempi" = "yes" ; then
dnl   CXX="$MPICXX"
dnl   AC_DEFINE([USE_MPI],[],[Use MPI])
dnl fi
dnl 
dnl dnl **** Check for PNG ****
dnl 
dnl if test "$builtinpng" != "yes" ; then
dnl    AC_CHECK_LIB(png, png_check_sig, LIBS="-lpng -lz -lm $LIBS", builtinpng=yes , [-lz -lm])
dnl fi
dnl 
dnl dnl AM_CONDITIONAL([NEED_PNG], [test "$builtinpng" = "yes"])
dnl 
dnl dnl **** Check for TIFF ****
dnl 
dnl if test "$builtintiff" != "yes" ; then
dnl    AC_CHECK_LIB(tiff, TIFFError, LIBS="-ltiff -lm $LIBS", builtintiff=yes , [-lm])
dnl fi
dnl 
dnl if test "$builtintiff" = "yes" ; then
dnl    AC_CONFIG_SUBDIRS(libs/libtiff361)
dnl fi
dnl 
dnl dnl AM_CONDITIONAL([NEED_TIFF], [test "$builtintiff" = "yes"])
dnl 
dnl dnl **** Check for JPEG ****
dnl 
dnl if test "$builtinjpg" != "yes" ; then
dnl    AC_CHECK_LIB(jpeg, jpeg_read_header, LIBS="-ljpeg $LIBS", builtinjpg=yes)
dnl fi
dnl 
dnl if test "$builtinjpg" = "yes" ; then
dnl    AC_CONFIG_SUBDIRS(libs/libjpeg6b)
dnl fi
dnl 
dnl dnl AM_CONDITIONAL([NEED_JPEG], [test "$builtinjpg" = "yes"])
dnl 
dnl dnl **** Configure libffi ****
dnl 
dnl AC_CONFIG_SUBDIRS(libs/libffi)
dnl 
dnl case $host in
dnl *-*-linux-* | *-*-cygwin*)
dnl   FLIBS=`echo $FLIBS | sed -e 's/-lfrtbegin//g'` ;;
dnl esac
dnl 
dnl case $host in
dnl *-*-darwin*)
dnl   LDFLAGS="$LDFLAGS -L/sw/lib";
dnl   CXXFLAGS="$CXXFLAGS -I/sw/include";
dnl   FLIBS="-lg2c";;
dnl esac
dnl 
dnl case $host in
dnl *-*-cygwin*)
dnl   CURSES_LIB=""
dnl esac
dnl 
dnl dnl **** Dink with some of the flags ****
dnl YFLAGS="$YFLAGS -d"
dnl AC_SUBST(YFLAGS)
dnl 
dnl 
dnl dnl FLTK library versions...
dnl FL_MAJOR_VERSION=1
dnl FL_MINOR_VERSION=1
dnl FL_PATCH_VERSION=5
dnl FL_RELEASE_VERSION=rc2
dnl FL_API_VERSION=${FL_MAJOR_VERSION}.${FL_MINOR_VERSION}
dnl 
dnl AC_SUBST(FL_MAJOR_VERSION)
dnl AC_SUBST(FL_MINOR_VERSION)
dnl AC_SUBST(FL_PATCH_VERSION)
dnl AC_SUBST(FL_RELEASE_VERSION)
dnl AC_SUBST(FL_API_VERSION)
dnl 
dnl dnl Get the operating system and version number...
dnl uname=`uname`
dnl uversion=`uname -r | sed -e '1,$s/[[^0-9]]//g'`
dnl if test "x$uname" = xIRIX64; then
dnl     uname="IRIX"
dnl fi
dnl if test "x$uname" = x; then
dnl     # MingW doesn't provide any output when uname is run, even with "-s"...
dnl     uname="CYGWIN"
dnl fi
dnl 
dnl dnl Don't automatically add "-g" to compiler options...
dnl CFLAGS="${CFLAGS:=}"
dnl CPPFLAGS="${CPPFLAGS:=}"
dnl CXXFLAGS="${CXXFLAGS:=}"
dnl OPTIM="${OPTIM:=}"
dnl 
dnl AC_SUBST(OPTIM)
dnl 
dnl dnl OS-specific pre-tests...
dnl case $uname in
dnl     CYGWIN* | MINGW*)
dnl         # Handle Cygwin option *first*, before all other tests.
dnl 	AC_ARG_ENABLE(cygwin, [  --enable-cygwin         use the CygWin libraries [default=no]])
dnl 	if test x$enable_cygwin != xyes; then
dnl 	    CFLAGS="$CFLAGS -mno-cygwin"
dnl 	    CPPFLAGS="$CPPFLAGS -mno-cygwin"
dnl 	    CXXFLAGS="$CXXFLAGS -mno-cygwin"
dnl 	    LDFLAGS="$LDFLAGS -mno-cygwin"
dnl 	fi
dnl 	;;
dnl esac
dnl 
dnl dnl Define the libraries and link options we'll need.
dnl LINKFLTK="-lfltk"
dnl LINKFLTKGL="-lfltk_gl"
dnl LINKFLTKIMG="-lfltk_images"
dnl GLDEMOS="gldemos"
dnl 
dnl LIBEXT=".a"
dnl LIBNAME="../lib/libfltk.a"
dnl FLLIBNAME="../lib/libfltk_forms.a"
dnl GLLIBNAME="../lib/libfltk_gl.a"
dnl IMGLIBNAME="../lib/libfltk_images.a"
dnl 
dnl AC_SUBST(FLLIBNAME)
dnl AC_SUBST(GLDEMOS)
dnl AC_SUBST(GLLIBNAME)
dnl AC_SUBST(IMGLIBNAME)
dnl AC_SUBST(LIBEXT)
dnl AC_SUBST(LIBNAME)
dnl AC_SUBST(LINKFLTK)
dnl AC_SUBST(LINKFLTKGL)
dnl AC_SUBST(LINKFLTKIMG)
dnl 
dnl dnl Handle compile-time options...
dnl AC_ARG_ENABLE(debug, [  --enable-debug          turn on debugging [default=no]])
dnl if test x$enable_debug = xyes; then
dnl     DEBUGFLAG="-g "
dnl else
dnl     DEBUGFLAG=""
dnl fi
dnl 
dnl AC_ARG_ENABLE(gl, [  --enable-gl             turn on OpenGL support [default=yes]])
dnl 
dnl AC_ARG_ENABLE(shared, [  --enable-shared         turn on shared libraries [default=no]])
dnl if test x$enable_shared = xyes; then
dnl     PICFLAG=1
dnl     SHAREDSUFFIX=""
dnl     FLUID="fluid-shared"
dnl 
dnl     case $uname in
dnl 	Darwin*)
dnl             DSONAME="libfltk.$FL_API_VERSION.dylib"
dnl             FLDSONAME="libfltk_forms.$FL_API_VERSION.dylib"
dnl             GLDSONAME="libfltk_gl.$FL_API_VERSION.dylib"
dnl             IMGDSONAME="libfltk_images.$FL_API_VERSION.dylib"
dnl 	    DSOCOMMAND="\$(CC) $DSOFLAGS -dynamiclib -lc -o"
dnl 	    ;;
dnl 
dnl 	SunOS* | UNIX_S*)
dnl             DSONAME="libfltk.so.$FL_API_VERSION"
dnl             FLDSONAME="libfltk_forms.so.$FL_API_VERSION"
dnl             GLDSONAME="libfltk_gl.so.$FL_API_VERSION"
dnl             IMGDSONAME="libfltk_images.so.$FL_API_VERSION"
dnl 	    DSOCOMMAND="\$(CXX) -h \$@ \$(LDLIBS) -G $DEBUGFLAG -o"
dnl 	    if test "x$libdir" != "x/usr/lib"; then
dnl 		    DSOLINK="-R$libdir"
dnl             fi
dnl 	    ;;
dnl 	HP-UX*)
dnl             DSONAME="libfltk.sl.$FL_API_VERSION"
dnl             FLDSONAME="libfltk_forms.sl.$FL_API_VERSION"
dnl             GLDSONAME="libfltk_gl.sl.$FL_API_VERSION"
dnl             IMGDSONAME="libfltk_images.sl.$FL_API_VERSION"
dnl 	    DSOCOMMAND="ld -b -z +h \$@ $DEBUGFLAG -o"
dnl 	    if test "x$libdir" != "x/usr/lib"; then
dnl 		    DSOLINK="-Wl,-rpath,$libdir"
dnl             fi
dnl 	    ;;
dnl 	IRIX*)
dnl             DSONAME="libfltk.so.$FL_API_VERSION"
dnl             FLDSONAME="libfltk_forms.so.$FL_API_VERSION"
dnl             GLDSONAME="libfltk_gl.so.$FL_API_VERSION"
dnl             IMGDSONAME="libfltk_images.so.$FL_API_VERSION"
dnl             DSOCOMMAND="\$(CXX) -Wl,-soname,\$@,-set_version,sgi1.1 \$(LDLIBS) -shared $DEBUGFLAG -o"
dnl 	    if test "x$libdir" != "x/usr/lib" -a "x$libdir" != "x/usr/lib32" -a "x$libdir" != "x/usr/lib64"; then
dnl 		    DSOLINK="-Wl,-rpath,$libdir"
dnl             fi
dnl 	    ;;
dnl 	OSF1*)
dnl             DSONAME="libfltk.so.$FL_API_VERSION"
dnl             FLDSONAME="libfltk_forms.so.$FL_API_VERSION"
dnl             GLDSONAME="libfltk_gl.so.$FL_API_VERSION"
dnl             IMGDSONAME="libfltk_images.so.$FL_API_VERSION"
dnl             DSOCOMMAND="\$(CXX) -Wl,-soname,\$@ \$(LDLIBS) -shared $DEBUGFLAG -o"
dnl 	    if test "x$libdir" != "x/usr/lib" -a "x$libdir" != "x/usr/lib32"; then
dnl 		    DSOLINK="-Wl,-rpath,$libdir"
dnl             fi
dnl 	    ;;
dnl 	Linux* | *BSD*)
dnl             DSONAME="libfltk.so.$FL_API_VERSION"
dnl             FLDSONAME="libfltk_forms.so.$FL_API_VERSION"
dnl             GLDSONAME="libfltk_gl.so.$FL_API_VERSION"
dnl             IMGDSONAME="libfltk_images.so.$FL_API_VERSION"
dnl             DSOCOMMAND="\$(CXX) -Wl,-soname,\$@ \$(LDLIBS) -shared -fPIC $DEBUGFLAG -o"
dnl 	    if test "x$libdir" != "x/usr/lib"; then
dnl 		    DSOLINK="-Wl,-rpath,$libdir"
dnl             fi
dnl 	    ;;
dnl 	AIX*)
dnl             DSONAME="libfltk_s.a"
dnl             FLDSONAME="libfltk_forms_s.a"
dnl             GLDSONAME="libfltk_gl_s.a"
dnl             IMGDSONAME="libfltk_images_s.a"
dnl             DSOCOMMAND="\$(CXX) -Wl,-bexpall,-bM:SRE,-bnoentry -o"
dnl             SHAREDSUFFIX="_s"
dnl             ;;
dnl         CYGWIN* | MINGW*)
dnl             AC_MSG_WARN(Shared libraries are not supported under CygWin.)
dnl 	    ;;
dnl 	*)
dnl             AC_MSG_WARN(Shared libraries may not be supported.  Trying -shared option with compiler.)
dnl             DSONAME="libfltk.so.$FL_API_VERSION"
dnl             FLDSONAME="libfltk_forms.so.$FL_API_VERSION"
dnl             GLDSONAME="libfltk_gl.so.$FL_API_VERSION"
dnl             IMGDSONAME="libfltk_images.so.$FL_API_VERSION"
dnl             DSOCOMMAND="\$(CXX) -Wl,-soname,\$@ \$(LDLIBS) -shared $DEBUGFLAG -o"
dnl 	    ;;
dnl     esac
dnl 
dnl     LINKSHARED="-L../src -lfltk_images$SHAREDSUFFIX -lfltk_forms$SHAREDSUFFIX -lfltk$SHAREDSUFFIX"
dnl else
dnl     DSOCOMMAND="echo"
dnl     DSOLINK=""
dnl     DSONAME=""
dnl     FLDSONAME=""
dnl     GLDSONAME=""
dnl     IMGDSONAME=""
dnl     PICFLAG=0
dnl     SHAREDSUFFIX=""
dnl     FLUID="fluid"
dnl     LINKSHARED="-L../lib -lfltk_images -lfltk_forms -lfltk"
dnl fi
dnl 
dnl AC_SUBST(DSOCOMMAND)
dnl AC_SUBST(DSOLINK)
dnl AC_SUBST(DSONAME)
dnl AC_SUBST(FLDSONAME)
dnl AC_SUBST(GLDSONAME)
dnl AC_SUBST(IMGDSONAME)
dnl AC_SUBST(SHAREDSUFFIX)
dnl AC_SUBST(LINKSHARED)
dnl AC_SUBST(FLUID)
dnl 
dnl AC_ARG_ENABLE(threads, [  --enable-threads        enable multi-threading support])
dnl 
dnl AC_ARG_WITH(optim, [  --with-optim="flags"    use custom optimization flags])
dnl 
dnl dnl Find commands...
dnl AC_PROG_CC
dnl AC_PROG_CXX
dnl dnl AC_PROG_INSTALL
dnl AC_PATH_PROG(NROFF,nroff)
dnl if test "x$NROFF" = "x:"; then
dnl     AC_PATH_PROG(GROFF,groff)
dnl     if test "x$GROFF" = "x:"; then
dnl         NROFF="echo"
dnl     else
dnl         NROFF="$GROFF -T ascii"
dnl     fi
dnl fi
dnl AC_PATH_PROG(HTMLDOC,htmldoc)
dnl 
dnl dnl How do we make libraries?
dnl AC_PROG_RANLIB
dnl AC_PATH_PROG(AR, ar)
dnl 
dnl if test "x$AR" = "x:"; then
dnl     AC_MSG_ERROR(Configure could not find the library archiver, aborting.)
dnl fi
dnl 
dnl if test "x$RANLIB" != "x:"; then
dnl     LIBCOMMAND="$AR cr"
dnl else
dnl     LIBCOMMAND="$AR crs"
dnl fi
dnl 
dnl AC_SUBST(LIBCOMMAND)
dnl 
dnl dnl Architecture checks...
dnl AC_C_BIGENDIAN
dnl 
dnl AC_CHECK_SIZEOF(short, 2)
dnl AC_CHECK_SIZEOF(int, 4)
dnl AC_CHECK_SIZEOF(long, 4)
dnl AC_DEFINE([BORDER_WIDTH],2,[Thickness of FL_UP_BOX and FL_DOWN_BOX])
dnl AC_DEFINE([USE_POLL],0,[Disable polling])
dnl #AC_DEFINE([FLTK_DATADIR],[""],[Directory where FLTK data goes])
dnl #AC_DEFINE([FLTK_DOCDIR],[""],[Directory where FLTK documentation goes])
dnl #AC_DEFINE([HAVE_CURSES_H],0,[True if we have curses.h])
dnl #AC_DEFINE([HAVE_GL],0,[True if we have GL])
dnl #AC_DEFINE([HAVE_GL_GLU_H],0,[True if we have GL/GLU.h])
dnl #AC_DEFINE([U16],0,[True if size of short is 2 bytes])
dnl #AC_DEFINE([U32],0,[True if size of int is 4 bytes])
dnl #AC_DEFINE([U64],0,[True if size of int is 8 bytes])
dnl #AC_DEFINE([USE_MPI],[],[True if we are building with MPI])
dnl #AC_DEFINE([HAVE_XDBE],0,[True if the X-server supports XDBE])
dnl #AC_DEFINE([USE_XFT],0,[True if we are to use the X-truetype support])
dnl #AC_DEFINE([HAVE_VSNPRINTF],1,[True if we are to use vsnprintf])
dnl #AC_DEFINE([HAVE_SYS_SELECT_H],0,[True if we have sys/select.h])
dnl #AC_DEFINE([HAVE_SNPRINTF],1,[True if we have snprintf function])
dnl #AC_DEFINE([HAVE_PTHREAD_H],0,[True if we have pthread.h])
dnl #AC_DEFINE([HAVE_PTHREAD],0,[True if we have pthread support])
dnl #AC_DEFINE([HAVE_PNG_H],0,[True if the PNG include is png.h])
dnl #AC_DEFINE([HAVE_OVERLAY],0,[True if we are to use the overlay support])
dnl #AC_DEFINE([HAVE_NCURSES_H],[],[True if we need to include ncurses.h])
dnl #AC_DEFINE([HAVE_LIBZ],0,[True if we have libz])
dnl #AC_DEFINE([HAVE_LIBPNG],0,[True if we have libpng])
dnl #AC_DEFINE([HAVE_LIBJPEG],0,[True if we have libjpeg])
dnl 
dnl 
dnl if test $ac_cv_sizeof_short -eq 2; then
dnl     AC_DEFINE(U16,unsigned short,[Size of short is 2 bytes])
dnl fi
dnl if test $ac_cv_sizeof_int -eq 4; then
dnl     AC_DEFINE(U32,unsigned,[Size of int is 4 bytes])
dnl else
dnl     if test $ac_cv_sizeof_long -eq 4; then
dnl         AC_DEFINE(U32,unsigned long)
dnl     fi
dnl fi
dnl if test $ac_cv_sizeof_int -eq 8; then
dnl     AC_DEFINE(U64,unsigned)
dnl else
dnl     if test $ac_cv_sizeof_long -eq 8; then
dnl         AC_DEFINE(U64,unsigned long,[Size of long is 8 bytes])
dnl     fi
dnl fi
dnl 
dnl dnl Does the C++ compiler support the bool type?
dnl AC_CACHE_CHECK(whether the compiler recognizes bool as a built-in type,
dnl     ac_cv_cxx_bool,[
dnl 	AC_LANG_SAVE
dnl 	AC_LANG_CPLUSPLUS
dnl 	AC_TRY_COMPILE([
dnl 	    int f(int  x){return 1;}
dnl 	    int f(char x){return 1;}
dnl 	    int f(bool x){return 1;}
dnl 	],[
dnl 	    bool b = true;
dnl 	    return f(b);
dnl 	], ac_cv_cxx_bool=yes, ac_cv_cxx_bool=no)
dnl 	AC_LANG_RESTORE
dnl     ])
dnl 
dnl if test "$ac_cv_cxx_bool" != yes; then
dnl     CXXFLAGS="-Dbool=char -Dfalse=0 -Dtrue=1 $CXXFLAGS"
dnl fi
dnl 
dnl dnl Standard headers and functions...
dnl AC_HEADER_DIRENT
dnl AC_CHECK_HEADER(sys/select.h,AC_DEFINE(HAVE_SYS_SELECT_H,1,[Defined if we have a sys/select.h]))
dnl AC_CHECK_HEADER(sys/stdtypes.h,AC_DEFINE(HAVE_SYS_SELECT_H,1))
dnl AC_CHECK_FUNC(scandir,
dnl     if test "x$uname" = xSunOS -o "x$uname" = xQNX; then
dnl         AC_MSG_WARN(Not using $uname scandir emulation function.)
dnl     else
dnl         AC_DEFINE(HAVE_SCANDIR,1,[Does a scandir function exist])
dnl     fi)
dnl AC_CHECK_FUNC(vsnprintf,[
dnl     case "$uname" in
dnl     	HP-UX*)
dnl 	    if test "$uversion" = "1020"; then
dnl 	        AC_MSG_WARN(Not using built-in vsnprintf function because you are running HP-UX 10.20.)
dnl 	    else
dnl         	AC_DEFINE(HAVE_VSNPRINTF,[],[Usable vsnprintf function exists])
dnl 	    fi
dnl 	    ;;
dnl 
dnl     	OSF1*)
dnl 	    if test "$uversion" = "40"; then
dnl                 AC_MSG_WARN(Not using built-in vsnprintf function because you are running Tru64 4.0.)
dnl 	    else
dnl         	AC_DEFINE(HAVE_VSNPRINTF)
dnl 	    fi
dnl 	    ;;
dnl 
dnl         *)
dnl             AC_DEFINE(HAVE_VSNPRINTF)
dnl 	    ;;
dnl     esac])
dnl AC_CHECK_FUNC(snprintf,[
dnl     case "$uname" in
dnl     	HP-UX*)
dnl 	    if test "$uversion" = "1020"; then
dnl 	        AC_MSG_WARN(Not using built-in snprintf function because you are running HP-UX 10.20.)
dnl 	    else
dnl         	AC_DEFINE(HAVE_SNPRINTF,[],[Usable snprintf function exists])
dnl 	    fi
dnl 	    ;;
dnl 
dnl     	OSF1*)
dnl 	    if test "$uversion" = "40"; then
dnl                 AC_MSG_WARN(Not using built-in snprintf function because you are running Tru64 4.0.)
dnl 	    else
dnl         	AC_DEFINE(HAVE_SNPRINTF)
dnl 	    fi
dnl 	    ;;
dnl 
dnl         *)
dnl             AC_DEFINE(HAVE_SNPRINTF)
dnl 	    ;;
dnl     esac])
dnl AC_CHECK_HEADER(strings.h, AC_DEFINE(HAVE_STRINGS_H))
dnl AC_CHECK_FUNCS(strcasecmp strlcat strlcpy)
dnl 
dnl dnl FLTK library uses math library functions...
dnl AC_SEARCH_LIBS(pow, m)
dnl 
dnl dnl Check for image libraries...
dnl SAVELIBS="$LIBS"
dnl IMAGELIBS=""
dnl 
dnl AC_SUBST(IMAGELIBS)
dnl 
dnl AC_ARG_ENABLE(localjpeg, [  --enable-localjpeg      use local JPEG library, default=auto],
dnl     [if eval "test x$enable_localjpeg = xyes"; then
dnl 	ac_cv_lib_jpeg_jpeg_CreateCompress=no
dnl     fi])
dnl 
dnl AC_CHECK_LIB(jpeg,jpeg_CreateCompress,
dnl     JPEGINC=""
dnl     JPEG=""
dnl     IMAGELIBS="-ljpeg $IMAGELIBS",
dnl     JPEGINC="-I../jpeg"
dnl     JPEG="jpeg"
dnl     IMAGELIBS="../lib/libjpeg.a $IMAGELIBS")
dnl 
dnl AC_ARG_ENABLE(localzlib, [  --enable-localzlib      use local ZLIB library, default=auto],
dnl     [if eval "test x$enable_localzlib = xyes"; then
dnl 	ac_cv_lib_z_gzgets=no
dnl     fi])
dnl 
dnl AC_CHECK_LIB(z,gzgets,
dnl     ZLIBINC=""
dnl     ZLIB=""
dnl     LIBS="-lz $LIBS"
dnl     IMAGELIBS="-lz $IMAGELIBS",
dnl     ZLIBINC="-I../zlib"
dnl     ZLIB="zlib"
dnl     LIBS="../lib/libz.a $LIBS"
dnl     IMAGELIBS="../lib/libz.a $IMAGELIBS")
dnl 
dnl AC_ARG_ENABLE(localpng, [  --enable-localpng       use local PNG library, default=auto],
dnl     [if eval "test x$enable_localpng = xyes"; then
dnl 	ac_cv_lib_png_png_set_tRNS_to_alpha=no
dnl     fi])
dnl 
dnl AC_CHECK_LIB(png,png_set_tRNS_to_alpha, [
dnl     PNGINC=""
dnl     PNG=""
dnl     IMAGELIBS="-lpng $IMAGELIBS"
dnl     AC_CHECK_HEADER(png.h, AC_DEFINE(HAVE_PNG_H,[],[Defined if png.h exists]))],[
dnl     AC_DEFINE(HAVE_PNG_H)
dnl     PNGINC="-I../png"
dnl     PNG="png"
dnl     IMAGELIBS="../lib/libpng.a $IMAGELIBS"])
dnl 
dnl AC_SUBST(JPEG)
dnl AC_SUBST(JPEGINC)
dnl AC_SUBST(PNG)
dnl AC_SUBST(PNGINC)
dnl AC_SUBST(ZLIB)
dnl AC_SUBST(ZLIBINC)
dnl 
dnl AC_DEFINE(HAVE_LIBJPEG,[],[Defined if we have libjpeg])
dnl AC_DEFINE(HAVE_LIBPNG,[],[Defined if we have libpng])
dnl AC_DEFINE(HAVE_LIBZ,[],[Defined if we have libz])
dnl 
dnl dnl Restore original LIBS settings...
dnl LIBS="$SAVELIBS"
dnl 
dnl dnl See if we need a .exe extension on executables...
dnl AC_EXEEXT
dnl 
dnl dnl Check for pthreads for multi-threaded apps...
dnl have_pthread=no
dnl 
dnl if test "x$enable_threads" = xyes; then
dnl     AC_CHECK_HEADER(pthread.h, AC_DEFINE(HAVE_PTHREAD_H,[],[Does a pthread.h exist]))
dnl     AC_CHECK_LIB(pthread, pthread_create)
dnl 
dnl     if test "x$ac_cv_lib_pthread_pthread_create" = xyes -a x$ac_cv_header_pthread_h = xyes; then
dnl         have_pthread=yes
dnl     else
dnl         dnl *BSD uses -pthread option...
dnl         AC_MSG_CHECKING([for pthread_create using -pthread])
dnl 	SAVELIBS="$LIBS"
dnl 	LIBS="-pthread $LIBS"
dnl         AC_TRY_LINK([#include <pthread.h>],
dnl 	    [pthread_create(0, 0, 0, 0);],
dnl             LIBS="-pthread $SAVELIBS"
dnl             have_pthread=yes,
dnl 	    LIBS="$SAVELIBS")
dnl         AC_MSG_RESULT([$have_pthread])
dnl     fi
dnl fi
dnl 
dnl dnl Define OS-specific stuff...
dnl HLINKS=
dnl POSTBUILD=:
dnl THREADS=
dnl 
dnl AC_ARG_WITH(links, [  --with-links            make header links for common misspellings])
dnl 
dnl case $uname in
dnl     CYGWIN* | MINGW*)
dnl         use_win32_main="yes"
dnl 	dnl Cygwin environment...
dnl 	CFLAGS="-mwindows -DWIN32 $CFLAGS"
dnl 	CXXFLAGS="-mwindows -DWIN32 $CXXFLAGS"
dnl 	LDFLAGS="-mwindows $LDFLAGS"
dnl 	LIBS="$LIBS -lole32 -luuid -lcomctl32 -lwsock32"
dnl 	OPTIM="$OPTIM"
dnl 
dnl 	if test x$enable_gl != xno; then
dnl 	    AC_CHECK_HEADER(GL/gl.h,
dnl 	        AC_DEFINE(HAVE_GL,[],[Defined if OpenGL exists])
dnl 		GLLIB="-lopengl32")
dnl 	    AC_CHECK_HEADER(GL/glu.h,
dnl         	AC_DEFINE(HAVE_GL_GLU_H)
dnl 		GLLIB="-lglu32 $GLLIB")
dnl 	else
dnl 	    LINKFLTKGL=""
dnl 	    GLLIBNAME=""
dnl 	    GLDSONAME=""
dnl 	    GLDEMOS=""
dnl 	fi
dnl 
dnl 	if test x$have_pthread = xyes; then
dnl 	    AC_DEFINE(HAVE_PTHREAD)
dnl 	    THREADS="threads.exe"
dnl 	fi
dnl 
dnl 	# Don't make symlinks since Windows is not case sensitive.
dnl 	if test "x$with_links" != xyes; then
dnl 		HLINKS="#"
dnl 	fi
dnl 	;;
dnl 
dnl     Darwin*)
dnl         use_mac_main="yes"
dnl         # MacOS X uses Carbon for graphics...
dnl         LIBS="$LIBS -framework Carbon -framework ApplicationServices"
dnl 
dnl 	if test x$have_pthread = xyes; then
dnl 	    AC_DEFINE(HAVE_PTHREAD,[],[Defined if we have pthread support])
dnl 	    THREADS="threads"
dnl 	fi
dnl 
dnl 	if test x$enable_gl != xno; then
dnl             AC_DEFINE(HAVE_GL)
dnl             AC_DEFINE(HAVE_GL_GLU_H)
dnl             GLLIB="-framework AGL -framework OpenGL"
dnl         else
dnl 	    LINKFLTKGL=""
dnl 	    GLLIBNAME=""
dnl 	    GLDSONAME=""
dnl 	    GLDEMOS=""
dnl         fi
dnl 
dnl 	# Don't make symlinks because HFS+ is not case sensitive...
dnl 	if test "x$with_links" != xyes; then
dnl 		HLINKS="#"
dnl 	fi
dnl 
dnl 	# Add a postbuild step after linking applications
dnl 	POSTBUILD="/Developer/Tools/Rez -t APPL -o"
dnl 	;;
dnl 
dnl     *)
dnl         use_x11_main="yes"
dnl 	# All others are UNIX/X11...
dnl 	if test x$have_pthread = xyes; then
dnl 	    AC_DEFINE(HAVE_PTHREAD)
dnl 	    THREADS="threads"
dnl 	fi
dnl 
dnl 	dnl Check for X11...
dnl 	AC_PATH_XTRA
dnl 
dnl 	if test x$no_x = xyes; then
dnl 	    AC_MSG_ERROR(Configure could not find required X11 libraries, aborting.)
dnl 	fi
dnl 
dnl 	if test "x$X_PRE_LIBS" != x; then
dnl 	    AC_MSG_WARN(Ignoring libraries \"$X_PRE_LIBS\" requested by configure.)
dnl 	fi
dnl 
dnl 	LIBS="$LIBS -lXext -lX11 $X_EXTRA_LIBS"
dnl 	CFLAGS="$CFLAGS $X_CFLAGS"
dnl 	CXXFLAGS="$CXXFLAGS $X_CFLAGS"
dnl 	LDFLAGS="$X_LIBS $LDFLAGS"
dnl 
dnl 	if test "x$x_includes" != x; then
dnl 	    ac_cpp="$ac_cpp -I$x_includes"
dnl 	fi
dnl 
dnl 	dnl Check for OpenGL unless disabled...
dnl 	GLLIB=
dnl 
dnl 	if test x$enable_gl != xno; then
dnl 	    AC_SEARCH_LIBS(dlopen, dl)
dnl 	    AC_CHECK_HEADER(GL/gl.h,
dnl 		AC_CHECK_LIB(GL, glXMakeCurrent, AC_DEFINE(HAVE_GL) GLLIB="-lGL", \
dnl 		    AC_CHECK_LIB(MesaGL,glXMakeCurrent, AC_DEFINE(HAVE_GL) GLLIB=" -lMesaGL",,\
dnl 			-lm), \
dnl 		    -lm)
dnl 	    )
dnl 	    AC_CHECK_HEADER(GL/glu.h,
dnl         	AC_DEFINE(HAVE_GL_GLU_H,[],[Does GL/GLU.H exist])
dnl 		if test x$ac_cv_lib_GL_glXMakeCurrent = xyes; then
dnl 		    GLLIB="-lGLU $GLLIB"
dnl 		fi
dnl 		if test x$ac_cv_lib_MesaGL_glXMakeCurrent = xyes; then
dnl 		    GLLIB="-lMesaGLU $GLLIB"
dnl 		fi
dnl 	    )
dnl 
dnl 	    if test x$ac_cv_lib_GL_glXMakeCurrent != xyes -a x$ac_cv_lib_MesaGL_glXMakeCurrent != xyes; then
dnl 		    LINKFLTKGL=""
dnl 		    GLLIBNAME=""
dnl 		    GLDSONAME=""
dnl 		    GLDEMOS=""
dnl 	    fi
dnl 	else
dnl 	    LINKFLTKGL=""
dnl 	    GLLIBNAME=""
dnl 	    GLDSONAME=""
dnl 	    GLDEMOS=""
dnl 	fi
dnl 
dnl 	dnl Check for the Xft library unless disabled...
dnl         AC_ARG_ENABLE(xft, [  --enable-xft            turn on Xft support [default=no]])
dnl 
dnl 	if test x$enable_xft = xyes; then
dnl             AC_PATH_PROG(FTCONFIG,freetype-config)
dnl 
dnl 	    if test "x$FTCONFIG" != "x:"; then
dnl 	        CPPFLAGS="`$FTCONFIG --cflags` $CPPFLAGS"
dnl 	        CXXFLAGS="`$FTCONFIG --cflags` $CXXFLAGS"
dnl 
dnl 		AC_CHECK_HEADER(X11/Xft/Xft.h,
dnl 		    AC_CHECK_LIB(Xft, XftDrawCreate,
dnl 	        	AC_DEFINE(USE_XFT,[],[Use XFT (X-Freetype)])
dnl 			LIBS="-lXft $LIBS"))
dnl 	    fi
dnl 	fi
dnl 
dnl 	dnl Check for the Xdbe extension unless disabled...
dnl         AC_ARG_ENABLE(xdbe, [  --enable-xdbe           turn on Xdbe support [default=no]])
dnl 
dnl 	if test x$enable_xdbe = xyes; then
dnl 	    AC_CHECK_HEADER(X11/extensions/Xdbe.h, AC_DEFINE(HAVE_XDBE,[],[X-Server has XDBE]),,
dnl 	        [#include <X11/Xlib.h>])
dnl 	fi
dnl 
dnl 	dnl Check for overlay visuals...
dnl 	AC_CACHE_CHECK(for X overlay visuals, ac_cv_have_overlay,
dnl 	    if xprop -root 2>/dev/null | grep -c "SERVER_OVERLAY_VISUALS" >/dev/null; then
dnl         	ac_cv_have_overlay=yes
dnl 	    else
dnl         	ac_cv_have_overlay=no
dnl 	    fi)
dnl 
dnl         if test x$ac_cv_have_overlay = xyes; then
dnl 	    AC_DEFINE(HAVE_OVERLAY,[],[Defined if the X server supports overlays])
dnl 	fi
dnl 
dnl 	# Make symlinks since UNIX/Linux is case sensitive.
dnl 	if test "x$with_links" = xno; then
dnl 		HLINKS="#"
dnl 	fi
dnl 	;;
dnl esac
dnl 
dnl dnl AM_CONDITIONAL([X11_MAIN], [test "$use_x11_main" = "yes"])
dnl dnl AM_CONDITIONAL([MAC_MAIN], [test "$use_mac_main" = "yes"])
dnl dnl AM_CONDITIONAL([WIN32_MAIN], [test "$use_win32_main" = "yes"])
dnl 
dnl AC_SUBST(GLDEMOS)
dnl AC_SUBST(GLLIB)
dnl AC_SUBST(HLINKS)
dnl AC_SUBST(POSTBUILD)
dnl AC_SUBST(THREADS)
dnl 
dnl dnl Figure out the appropriate formatted man page extension...
dnl case "$uname" in
dnl     *BSD* | Darwin*)
dnl 	# *BSD
dnl 	CAT1EXT=0
dnl 	CAT3EXT=0
dnl 	;;
dnl     IRIX*)
dnl 	# SGI IRIX
dnl 	CAT1EXT=z
dnl 	CAT3EXT=z
dnl 	;;
dnl     *)
dnl 	# All others
dnl 	CAT1EXT=1
dnl 	CAT3EXT=3
dnl 	;;
dnl esac
dnl 
dnl AC_SUBST(CAT1EXT)
dnl AC_SUBST(CAT3EXT)
dnl 
dnl dnl Fix "mandir" variable...
dnl if test "$mandir" = "\${prefix}/man" -a "$prefix" = "/usr"; then
dnl     case "$uname" in
dnl         *BSD* | Darwin* | Linux*)
dnl             # *BSD, Darwin, and Linux
dnl             mandir="\${prefix}/share/man"
dnl             ;;
dnl         IRIX*)
dnl             # SGI IRIX
dnl             mandir="\${prefix}/share/catman"
dnl             ;;
dnl     esac
dnl fi
dnl 
dnl dnl Fix "libdir" variable...
dnl if test "$prefix" = NONE; then
dnl     prefix=/usr/local
dnl fi
dnl 
dnl if test "$exec_prefix" = NONE; then
dnl     exec_prefix="\${prefix}"
dnl fi
dnl 
dnl if test "$uname" = "IRIX" -a $uversion -ge 62 -a "$libdir" = "\${exec_prefix}/lib" -a "$exec_prefix" = "\${prefix}" -a "$prefix" = "/usr"; then
dnl     libdir="/usr/lib32"
dnl fi
dnl 
dnl dnl Define the command used to update the dependencies (this option
dnl dnl mainly for FLTK core developers - not necessary for users)
dnl MAKEDEPEND="\$(CXX) -M"
dnl AC_SUBST(MAKEDEPEND)
dnl 
dnl dnl Add warnings to compiler switches:
dnl dnl do this last so messing with switches does not break tests
dnl 
dnl dnl if test -n "$GCC"; then
dnl dnl     # Starting with GCC 3.0, you must link C++ programs against either
dnl dnl     # libstdc++ (shared by default), or libsupc++ (always static).  If
dnl dnl     # you care about binary portability between Linux distributions,
dnl dnl     # you need to either 1) build your own GCC with static C++ libraries
dnl dnl     # or 2) link using gcc and libsupc++.  We choose the latter since
dnl dnl     # CUPS doesn't (currently) use any of the stdc++ library.
dnl dnl     #
dnl dnl     # Also, GCC 3.0.x still has problems compiling some code.  You may
dnl dnl     # or may not have success with it.  USE 3.0.x WITH EXTREME CAUTION!
dnl dnl     #
dnl dnl     # Previous versions of GCC do not have the reliance on the stdc++
dnl dnl     # or g++ libraries, so the extra supc++ library is not needed.
dnl dnl 
dnl dnl     AC_MSG_CHECKING(if libsupc++ is required)
dnl dnl 
dnl dnl     SUPC="`$CXX -print-file-name=libsupc++.a 2>/dev/null`"
dnl dnl     case "$SUPC" in
dnl dnl     	libsupc++.a*)
dnl dnl 	    # Library not found, so this is and older GCC...
dnl dnl 	    AC_MSG_RESULT(no)
dnl dnl 	    ;;
dnl dnl 	*)
dnl dnl             # This is gcc 3.x, and it knows of libsupc++, so we need it
dnl dnl             LIBS="$LIBS -lsupc++"
dnl dnl             AC_MSG_RESULT(yes)
dnl dnl 	    ;;
dnl dnl     esac
dnl dnl 
dnl dnl     CXX="$CC"
dnl dnl 
dnl dnl     # Show all standard warnings + unused variables when compiling...
dnl dnl     OPTIM="-Wall -Wunused $OPTIM"
dnl dnl 
dnl dnl     # The following additional warnings are useful for tracking down problems...
dnl dnl     OPTIM="-Wshadow -Wconversion -Winline $OPTIM"
dnl dnl 
dnl dnl     # Set the default compiler optimizations...
dnl dnl     if test -z "$DEBUGFLAG"; then
dnl dnl     	#
dnl dnl 	# Note: Can't use -fomit-frame-pointer - prevents tools like
dnl dnl 	#       libsafe from working!
dnl dnl         #
dnl dnl 	#       Don't use -fforce-mem, -fforce-addr, or -fcaller-saves.
dnl dnl 	#       They all seem to make either no difference or enlarge
dnl dnl 	#       the code by a few hundred bytes.
dnl dnl         #
dnl dnl 	#       "-O2" seems to be the best compromise between speed and
dnl dnl 	#       code size.  "-O3" and higher seem to make no effective
dnl dnl 	#       difference in the speed of the code, but does bloat the
dnl dnl 	#       library 10+%.
dnl dnl 	#
dnl dnl 
dnl dnl         if test "x$with_optim" != x; then
dnl dnl 	    OPTIM="$with_optim $OPTIM"
dnl dnl 	else
dnl dnl             OPTIM="-O2 $OPTIM"
dnl dnl 	fi
dnl dnl     fi
dnl dnl 
dnl dnl     # Generate position-independent code when needed...
dnl dnl     if test $PICFLAG = 1; then
dnl dnl     	OPTIM="$OPTIM -fPIC"
dnl dnl     fi
dnl dnl 
dnl dnl     # See if GCC supports -fno-exceptions...
dnl dnl     AC_MSG_CHECKING(if GCC supports -fno-exceptions)
dnl dnl     OLDCFLAGS="$CFLAGS"
dnl dnl     CFLAGS="$CFLAGS -fno-exceptions"
dnl dnl     AC_TRY_COMPILE(,,
dnl dnl 	OPTIM="$OPTIM -fno-exceptions"
dnl dnl 	AC_MSG_RESULT(yes),
dnl dnl 	AC_MSG_RESULT(no))
dnl dnl     CFLAGS="$OLDCFLAGS"
dnl dnl 
dnl dnl     # See if we are running Solaris; if so, try the -fpermissive option...
dnl dnl     # This option is required on some versions of Solaris to work around
dnl dnl     # bugs in the X headers up through Solaris 7.
dnl dnl     #
dnl dnl     # Unlike the other compiler/optimization settings, this one is placed
dnl dnl     # in CFLAGS and CXXFLAGS so that fltk-config will provide the option
dnl dnl     # to clients - otherwise client apps will not compile properly...
dnl dnl     if test "$uname" = SunOS; then
dnl dnl 	AC_MSG_CHECKING(if GCC supports -fpermissive)
dnl dnl 
dnl dnl 	OLDCFLAGS="$CFLAGS"
dnl dnl 	CFLAGS="$CFLAGS -fpermissive"
dnl dnl 	AC_TRY_COMPILE(,,
dnl dnl 	    CXXFLAGS="$CXXFLAGS -fpermissive"
dnl dnl 	    AC_MSG_RESULT(yes),
dnl dnl 	    CFLAGS="$OLDCFLAGS"
dnl dnl 	    AC_MSG_RESULT(no))
dnl dnl     fi
dnl dnl else
dnl dnl     case "$uname" in
dnl dnl         IRIX*)
dnl dnl 	    # Running some flavor of IRIX; see which version and
dnl dnl 	    # set things up according...
dnl dnl 	    if test "$uversion" -ge 62; then
dnl dnl 	        # We are running IRIX 6.2 or higher; uncomment the following
dnl dnl 		# lines if you don't have IDO 7.2 or higher:
dnl dnl 		#
dnl dnl 		#     CXX="CC -n32 -mips3"
dnl dnl 		#     CC="cc -n32 -mips3"
dnl dnl 		#     LD="ld -n32 -mips3"
dnl dnl 		#     MAKEDEPEND="CC -M"
dnl dnl 
dnl dnl 		if test "x`grep abi=n32 /etc/compiler.defaults`" = x; then
dnl dnl 			AC_MSG_WARN(FOR BEST RESULTS BEFORE COMPILING: setenv SGI_ABI \"-n32 -mips3\")
dnl dnl 		fi
dnl dnl 
dnl dnl         	OPTIM="-fullwarn $OPTIM"
dnl dnl 	    fi
dnl dnl 	    if test -z "$DEBUGFLAG"; then
dnl dnl         	if test "x$with_optim" != x; then
dnl dnl 		    OPTIM="$with_optim $OPTIM"
dnl dnl 		else
dnl dnl         	    OPTIM="-O2 $OPTIM"
dnl dnl 		    if test $uversion -gt 62; then
dnl dnl         	        OPTIM="-OPT:Olimit=4000 $OPTIM"
dnl dnl 	            fi
dnl dnl 		fi
dnl dnl 	    fi
dnl dnl 	    ;;
dnl dnl 	HP-UX*)
dnl dnl 	    # Running HP-UX; these options should work for the HP compilers.
dnl dnl 	    if test -z "$DEBUGFLAG"; then
dnl dnl         	if test "x$with_optim" != x; then
dnl dnl 		    OPTIM="$with_optim $OPTIM"
dnl dnl 		else
dnl dnl         	    OPTIM="+O2 $OPTIM"
dnl dnl 		fi
dnl dnl 	    fi
dnl dnl 
dnl dnl             if test "x$with_optim" = x; then
dnl dnl 		OPTIM="$OPTIM +DAportable"
dnl dnl             fi
dnl dnl 
dnl dnl 	    if test $PICFLAG = 1; then
dnl dnl 		OPTIM="+z $OPTIM"
dnl dnl 	    fi
dnl dnl 
dnl dnl 	    OPTIM="$OPTIM +W336,501,736,740,749,829"
dnl dnl 	    ;;
dnl dnl 	OSF1*)
dnl dnl 	    # Running Digital/Tru64 UNIX; these options should work for the
dnl dnl 	    # Digital/Compaq/NewHP compilers.
dnl dnl 	    if test -z "$DEBUGFLAG"; then
dnl dnl         	if test "x$with_optim" != x; then
dnl dnl 		    OPTIM="$with_optim $OPTIM"
dnl dnl 		else
dnl dnl         	    OPTIM="-O2 $OPTIM"
dnl dnl 		fi
dnl dnl 	    fi
dnl dnl 	    ;;
dnl dnl 	SunOS*)
dnl dnl 	    # Solaris
dnl dnl 	    if test -z "$DEBUGFLAG"; then
dnl dnl         	if test "x$with_optim" != x; then
dnl dnl 		    OPTIM="$with_optim $OPTIM"
dnl dnl 		else
dnl dnl         	    OPTIM="-xO3 $OPTIM"
dnl dnl 		fi
dnl dnl 	    fi
dnl dnl 
dnl dnl 	    if test $PICFLAG = 1; then
dnl dnl 		OPTIM="-KPIC $OPTIM"
dnl dnl 	    fi
dnl dnl 	    ;;
dnl dnl 	AIX*)
dnl dnl 	    if test -z "$DEBUGFLAG"; then
dnl dnl         	if test "x$with_optim" != x; then
dnl dnl 		    OPTIM="$with_optim $OPTIM"
dnl dnl 		else
dnl dnl         	    OPTIM="-O2 $OPTIM"
dnl dnl 		fi
dnl dnl 	    fi
dnl dnl 
dnl dnl 	    AC_MSG_WARN(The AIX C and C++ compilers are known not to correctly compile the FLTK library.)
dnl dnl 	    ;;
dnl dnl 	*)
dnl dnl 	    # Running some other operating system; inform the user they
dnl dnl 	    # should contribute the necessary options to fltk-bugs@fltk.org...
dnl dnl 	    AC_MSG_WARN(Building FLTK with default compiler optimizations)
dnl dnl 	    AC_MSG_WARN(Contact fltk-bugs@fltk.org with uname and compiler options.)
dnl dnl 	    ;;
dnl dnl     esac
dnl dnl fi
dnl dnl 
dnl OPTIM="$DEBUGFLAG $OPTIM"
dnl 
dnl dnl Define the FLTK documentation directory...
dnl if test x$prefix = xNONE; then
dnl     AC_DEFINE_UNQUOTED(FLTK_DOCDIR, "/usr/local/share/doc/fltk", [FLTK documentation directory])
dnl else
dnl     AC_DEFINE_UNQUOTED(FLTK_DOCDIR, "$prefix/share/doc/fltk", [FLTK documentation directory])
dnl fi
dnl 
dnl dnl Define the FLTK data directory...
dnl if test x$prefix = xNONE; then
dnl     AC_DEFINE_UNQUOTED(FLTK_DATADIR, "/usr/local/share/fltk", [FLTK data directory])
dnl else
dnl     AC_DEFINE_UNQUOTED(FLTK_DATADIR, "$prefix/share/fltk", [FLTK data directory])
dnl fi
dnl 
dnl dnl Write all of the files...
dnl AC_CONFIG_HEADER(config.h:configh.in)
dnl 
dnl LAPACK_LIBS="-L\${top_builddir}/libs/libMiniLAPACK -lMiniLAPACK"
dnl 
dnl 
dnl LIBS="$LAPACK_LIBS $BLAS_LIBS $LIBS $FLIBS $CURSES_LIB $MPILIBS"
dnl 
dnl dnl AC_OUTPUT(Makefile src/Makefile src/x11/Makefile libs/Makefile libs/libFFTPack/Makefile libs/libFreeMat/Makefile libs/libCore/Makefile libs/libFN/Makefile libs/libGraphics/Makefile libs/libXP/Makefile help/Makefile help/mdc/Makefile help/html/Makefile MFiles/Makefile src/win32/Makefile libs/libf2c/Makefile libs/libz/Makefile libs/lpng125/Makefile libs/libMiniLAPACK/Makefile libs/libMiniBLAS/Makefile src/mac/Makefile libs/libFLTK/Makefile  libs/libUMFPACK/Makefile libs/libUMFPACK/AMD/Makefile libs/libUMFPACK/UMFPACK/Makefile libs/libARPACK/Makefile)
dnl 
dnl echo \
dnl "------------------------------------------------------------------------
dnl Configuration:
dnl 
dnl   Source code location:       ${srcdir}
dnl   Main location:              ${maindir}
dnl   C Compiler:	              ${CC}
dnl   C Compiler flags:           ${CFLAGS}
dnl   C++ Compiler:		      ${CXX}
dnl   C++ Compiler flags:         ${CXXFLAGS}
dnl   Host System Type:           ${host}
dnl   Install path:		      ${prefix}
dnl   Libs:			      ${LIBS}
dnl   Force Mini-BLAS:	      ${forceminiblas}
dnl   Build MPI:		      ${usempi}
dnl   G77 flag:                   ${G77}
dnl 
dnl ------------------------------------------------------------------------"
dnl 
