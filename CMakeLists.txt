######## CMake debugging macro
MACRO(WRITE_OUT_ALL_VARIABLES)
SET(DstFile ${CMAKE_CURRENT_BINARY_DIR}/AllVariables.txt)
    
#MESSAGE("DEBUG -- Writing out all variables to file ${DstFile}")
    
FILE(WRITE ${DstFile} "")
GET_CMAKE_PROPERTY(VARS VARIABLES)
FOREACH(var ${VARS})
FILE(APPEND ${DstFile} "${var} \"${${var}}\"\n")
ENDFOREACH(var ${VARS})
ENDMACRO(WRITE_OUT_ALL_VARIABLES)
### End Debugging tools

IF( CMAKE_GENERATOR MATCHES "Visual Studio" )
  PROJECT(FreeMat CXX C )
ELSE( CMAKE_GENERATOR MATCHES "Visual Studio" )
  PROJECT(FreeMat CXX C Fortran)
ENDIF( CMAKE_GENERATOR MATCHES "Visual Studio" )

SET( VERSION "svn")
SET( RESOURCEDIR "" )
SET( CMAKE_VERBOSE_MAKEFILE TRUE )
SET( LOCAL_PATH ${PROJECT_SOURCE_DIR}/dependencies/bin ${PROJECT_BINARY_DIR} /mingw/lib INTERNAL )

IF( MSVC )
	ADD_DEFINITIONS( /Dsnprintf=_snprintf /DNOMINMAX /DVERSION="\\"${VERSION}"\\" /DRESOURCEDIR="\\"${RESOURCEDIR}"\\")
ELSE( MSVC )
	ADD_DEFINITIONS( -D'VERSION=\"${VERSION}\"' -D'RESOURCEDIR=\"${RESOURCEDIR}\"')
ENDIF( MSVC )



FIND_PACKAGE(OpenGL REQUIRED) 

SET(QT_USE_QTNETWORK TRUE)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTOPENGL TRUE)

FIND_PACKAGE(Qt4 REQUIRED)
#FIND_PACKAGE(Qt4)
ADD_DEFINITIONS( ${QT_DEFINITIONS} ) 

MACRO (QT4_GENERATE_UI infile outfile )
     GET_FILENAME_COMPONENT(infile ${infile} ABSOLUTE)

     ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
        COMMAND ${QT_UIC_EXECUTABLE}
        ARGS -o ${outfile} ${infile}
        DEPENDS ${infile})

     MACRO_ADD_FILE_DEPENDENCIES(${infile} ${outfile})
ENDMACRO (QT4_GENERATE_UI)

###########################################################################################
IF( NOT MSVC )
	FIND_LIBRARY(BLAS_LIBRARY NAMES blas atlas DOC "Location of BLAS or ATLAS library" PATHS  ${LOCAL_PATH} )
	FIND_LIBRARY(LAPACK_LIBRARY NAMES lapack clapack DOC "Location of LAPACK library" PATHS ${LOCAL_PATH} )
ENDIF( NOT MSVC )

#Find AVCALL Library
FIND_LIBRARY(AVCALL_LIBRARY NAMES avcall DOC "Location of the AVCALL library" PATHS ${LOCAL_PATH})
FIND_PATH(AVCALL_INCLUDE_DIR NAMES avcall.h DOC "Location of avcall.h" PATHS ${LOCAL_PATH} /mingw/include)
IF( AVCALL_LIBRARY AND AVCALL_INCLUDE_DIR ) 
	ADD_DEFINITIONS( -DHAVE_AVCALL )
	INCLUDE_DIRECTORIES( ${AVCALL_INCLUDE_DIR} )
ENDIF( AVCALL_LIBRARY AND AVCALL_INCLUDE_DIR )	

#Find FFTW and FFTWF (single precision)
FIND_LIBRARY(FFTW_LIBRARY NAMES fftw3 fftw3-3 libfftw3-3 DOC "Location of the FFTW library" PATHS ${LOCAL_PATH} )
FIND_PATH(FFTW_INCLUDE_DIR NAMES fftw3.h DOC "Location of fftw3.h" PATHS ${LOCAL_PATH} /mingw/include)
IF( FFTW_LIBRARY AND FFTW_INCLUDE_DIR ) 
	ADD_DEFINITIONS( -DHAVE_FFTW )
	INCLUDE_DIRECTORIES( ${FFTW_INCLUDE_DIR} )
ENDIF( FFTW_LIBRARY AND FFTW_INCLUDE_DIR )	

FIND_LIBRARY(FFTWF_LIBRARY NAMES fftw3f fftw3f-3 libfftw3f-3 DOC "Location of the FFTW (single precision) library" PATHS ${LOCAL_PATH} )
IF( FFTWF_LIBRARY AND FFTW_INCLUDE_DIR ) 
	ADD_DEFINITIONS( -DHAVE_FFTWF )
	INCLUDE_DIRECTORIES( ${FFTW_INCLUDE_DIR} )
ENDIF( FFTWF_LIBRARY AND FFTW_INCLUDE_DIR )	

FIND_LIBRARY(ZLIB_LIBRARY NAMES z zlib zlib1 DOC "Location of ZLIB library" PATHS ${LOCAL_PATH})
FIND_PATH(ZLIB_INCLUDE_DIR NAMES zlib.h DOC "Location of zlib.h" PATHS ${LOCAL_PATH})
IF( ZLIB_LIBRARY AND ZLIB_INCLUDE_DIR ) 
	INCLUDE_DIRECTORIES( ${ZLIB_INCLUDE_DIR} )
ENDIF( ZLIB_LIBRARY AND ZLIB_INCLUDE_DIR )	

#############################################################################
#Find UMFPACK
IF( NOT MSVC )
FIND_LIBRARY(UMFPACK_LIBRARY NAMES umfpack DOC "Location of the UMFPACK library" PATHS /mingw/lib)
FIND_PATH(UMFPACK_INCLUDE_DIR NAMES umfpack.h DOC "Location of umfpack.h" PATHS /mingw/include)
FIND_LIBRARY(AMD_LIBRARY NAMES amd DOC "Location of the AMD library" PATHS /mingw/lib)
FIND_PATH(AMD_INCLUDE_DIR NAMES amd.h DOC "Location of amd.h" PATHS /mingw/include)
IF( UMFPACK_LIBRARY AND UMFPACK_INCLUDE_DIR AND AMD_LIBRARY AND AMD_INCLUDE_DIR) 
	ADD_DEFINITIONS( -DHAVE_UMFPACK )
        INCLUDE_DIRECTORIES( ${UMFPACK_INCLUDE_DIR} )
        INCLUDE_DIRECTORIES( ${AMD_INCLUDE_DIR} )
ENDIF( UMFPACK_LIBRARY AND UMFPACK_INCLUDE_DIR AND AMD_LIBRARY AND AMD_INCLUDE_DIR )	
ENDIF( NOT MSVC )

#############################################################################
#Find LLVM
IF( MSVC )
	SET( LLVM_SEARCH_PATH ${PROJECT_SOURCE_DIR}/dependencies/llvm-2.0/include/llvm )
    SET( LLVM_LIB_SRCH_PATH ${PROJECT_SOURCE_DIR}/dependencies/llvm-2.0/win32/debug )	
	FIND_PATH( LLVM_INCLUDE_DIR NAMES Module.h PATHS ${LLVM_SEARCH_PATH} DOC "Top level include directory for LLVM" )
	
	FIND_LIBRARY( LLVM_ExecEng_LIB NAMES ExecutionEngine PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_CodegenEng_LIB NAMES CodeGen PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_X86_LIB NAMES x86 PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_VMCore_LIB NAMES VMCore PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_Analysis_LIB NAMES Analysis PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_Transforms_LIB NAMES Transforms PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_Target_LIB NAMES Target PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_System_LIB NAMES System PATHS ${LLVM_LIB_SRCH_PATH} )
	FIND_LIBRARY( LLVM_Support_LIB NAMES Support PATHS ${LLVM_LIB_SRCH_PATH} )
	
	SET( LLVM_LIB ${LLVM_ExecEng_LIB} ${LLVM_CodegenEng_LIB} ${LLVM_X86_LIB} ${LLVM_VMCore_LIB} 
	  ${LLVM_Analysis_LIB} ${LLVM_Transforms_LIB} ${LLVM_Target_LIB} ${LLVM_System_LIB} 
	  ${LLVM_Support_LIB} )
	
	IF( LLVM_INCLUDE_DIR AND LLVM_ExecEng_LIB )
		SET( LLVM_FOUND TRUE )
		ADD_DEFINITIONS( -DHAVE_LLVM )
		INCLUDE_DIRECTORIES( ${LLVM_INCLUDE_DIR}/ )
	ENDIF( LLVM_INCLUDE_DIR AND LLVM_ExecEng_LIB )
ENDIF( MSVC )


##############################################################################
#Extra libraries
IF(NOT MSVC)
	FIND_LIBRARY(NCURSES_LIBRARY NAMES ncurses DOC "Location of the ncurses library." PATH /mingw/lib)
	FIND_LIBRARY(SOCKS_LIBRARY NAMES socks wsock32 DOC "Location of the winsock library." PATH /mingw/lib)
	SET(EXTRA_LIBRARIES ${NCURSES_LIBRARY} ${SOCKS_LIBRARY} )  
ELSE(NOT MSVC)
	FIND_LIBRARY(SOCKS_LIBRARY NAMES socks wsock32 ws2_32 DOC "Location of the winsock library." PATH /mingw/lib)
	SET(EXTRA_LIBRARIES ${SOCKS_LIBRARY} )  
ENDIF(NOT MSVC)

#IF( WIN32 )
#	FIND_LIBRARY(G2C_LIBRARY NAMES g2c gfortran DOC "Location of Fortran to C (g2c) library" PATHS /mingw/lib)
#ENDIF( WIN32 )

###########################################################################
# F2C setup
IF( MSVC )
	FIND_PROGRAM( F2C_PROG NAMES f2c.exe f2c PATHS ${LOCAL_PATH} DOC "Fortran to C translator" )
	FIND_LIBRARY( F2C_LIBRARY NAMES vcf2c f2c PATHS ${LOCAL_PATH} DOC "Fortran to C Library" )
	FIND_PATH( F2C_INCLUDE_DIR f2c.h PATHS ${LOCAL_PATH} DOC "Path to f2c.h" )
	INCLUDE_DIRECTORIES(${F2C_INCLUDE_DIR}) 
	#SET( F2C_FLAGS STRING " -g -c " INTERNAL )
ENDIF( MSVC )

###########################################################################
# Macro for f2c conversion
MACRO( CONVERT_F2C dep C_FILES )
	IF( MSVC AND F2C_PROG )
		FOREACH( nm ${ARGN} )
			GET_FILENAME_COMPONENT(outfile ${nm} NAME_WE)
			ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${outfile}.c 
			  COMMAND ${F2C_PROG} 
			  ARGS -d${CMAKE_CURRENT_BINARY_DIR} -g -c ${nm}
			  #MAIN_DEPENDENCY ${dep}
			  DEPENDS ${nm}
			  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
			  VERBATIM
			) 
			MACRO_ADD_FILE_DEPENDENCIES(${nm} ${CMAKE_CURRENT_BINARY_DIR}/${outfile}.c )
			SET( ${C_FILES} ${${C_FILES}} ${CMAKE_CURRENT_BINARY_DIR}/${outfile}.c )
		ENDFOREACH( nm ${ARGN} )
	ENDIF( MSVC AND F2C_PROG )
ENDMACRO( CONVERT_F2C dep C_FILES )

INCLUDE_DIRECTORIES( libs/libFreeMat libs/libGraphics 
libs/libMex libs/libXP libs/libCore libs/libFN  ${QT_LIBRARIES} src)   

ADD_SUBDIRECTORY( dependencies )
ADD_SUBDIRECTORY( libs )
ADD_SUBDIRECTORY( src )

##ADD_SUBDIRECTORY( images )
##ADD_SUBDIRECTORY( tools )

#TODO Handle gfortran vs g77 issue: libgfortran vs libg2c
WRITE_OUT_ALL_VARIABLES()
